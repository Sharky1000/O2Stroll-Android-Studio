// Generated by view binder compiler. Do not edit!
package com.example.o2stroll.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.o2stroll.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentExploreBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button filterBeaches;

  @NonNull
  public final Button filterForests;

  @NonNull
  public final Button filterParks;

  @NonNull
  public final HorizontalScrollView filterScroll;

  @NonNull
  public final Button filterTrails;

  @NonNull
  public final CardView mapCard;

  @NonNull
  public final TextView mapPlaceholder;

  @NonNull
  public final TextView nearbyTitle;

  @NonNull
  public final TextView pageTitle;

  @NonNull
  public final LinearLayout placesContainer;

  @NonNull
  public final ImageButton searchButton;

  @NonNull
  public final CardView searchCard;

  @NonNull
  public final EditText searchInput;

  private FragmentExploreBinding(@NonNull ConstraintLayout rootView, @NonNull Button filterBeaches,
      @NonNull Button filterForests, @NonNull Button filterParks,
      @NonNull HorizontalScrollView filterScroll, @NonNull Button filterTrails,
      @NonNull CardView mapCard, @NonNull TextView mapPlaceholder, @NonNull TextView nearbyTitle,
      @NonNull TextView pageTitle, @NonNull LinearLayout placesContainer,
      @NonNull ImageButton searchButton, @NonNull CardView searchCard,
      @NonNull EditText searchInput) {
    this.rootView = rootView;
    this.filterBeaches = filterBeaches;
    this.filterForests = filterForests;
    this.filterParks = filterParks;
    this.filterScroll = filterScroll;
    this.filterTrails = filterTrails;
    this.mapCard = mapCard;
    this.mapPlaceholder = mapPlaceholder;
    this.nearbyTitle = nearbyTitle;
    this.pageTitle = pageTitle;
    this.placesContainer = placesContainer;
    this.searchButton = searchButton;
    this.searchCard = searchCard;
    this.searchInput = searchInput;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentExploreBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentExploreBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_explore, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentExploreBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.filterBeaches;
      Button filterBeaches = ViewBindings.findChildViewById(rootView, id);
      if (filterBeaches == null) {
        break missingId;
      }

      id = R.id.filterForests;
      Button filterForests = ViewBindings.findChildViewById(rootView, id);
      if (filterForests == null) {
        break missingId;
      }

      id = R.id.filterParks;
      Button filterParks = ViewBindings.findChildViewById(rootView, id);
      if (filterParks == null) {
        break missingId;
      }

      id = R.id.filterScroll;
      HorizontalScrollView filterScroll = ViewBindings.findChildViewById(rootView, id);
      if (filterScroll == null) {
        break missingId;
      }

      id = R.id.filterTrails;
      Button filterTrails = ViewBindings.findChildViewById(rootView, id);
      if (filterTrails == null) {
        break missingId;
      }

      id = R.id.mapCard;
      CardView mapCard = ViewBindings.findChildViewById(rootView, id);
      if (mapCard == null) {
        break missingId;
      }

      id = R.id.mapPlaceholder;
      TextView mapPlaceholder = ViewBindings.findChildViewById(rootView, id);
      if (mapPlaceholder == null) {
        break missingId;
      }

      id = R.id.nearbyTitle;
      TextView nearbyTitle = ViewBindings.findChildViewById(rootView, id);
      if (nearbyTitle == null) {
        break missingId;
      }

      id = R.id.pageTitle;
      TextView pageTitle = ViewBindings.findChildViewById(rootView, id);
      if (pageTitle == null) {
        break missingId;
      }

      id = R.id.placesContainer;
      LinearLayout placesContainer = ViewBindings.findChildViewById(rootView, id);
      if (placesContainer == null) {
        break missingId;
      }

      id = R.id.searchButton;
      ImageButton searchButton = ViewBindings.findChildViewById(rootView, id);
      if (searchButton == null) {
        break missingId;
      }

      id = R.id.searchCard;
      CardView searchCard = ViewBindings.findChildViewById(rootView, id);
      if (searchCard == null) {
        break missingId;
      }

      id = R.id.searchInput;
      EditText searchInput = ViewBindings.findChildViewById(rootView, id);
      if (searchInput == null) {
        break missingId;
      }

      return new FragmentExploreBinding((ConstraintLayout) rootView, filterBeaches, filterForests,
          filterParks, filterScroll, filterTrails, mapCard, mapPlaceholder, nearbyTitle, pageTitle,
          placesContainer, searchButton, searchCard, searchInput);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
